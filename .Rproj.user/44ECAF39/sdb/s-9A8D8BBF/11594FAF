{
    "collab_server" : "",
    "contents" : "##    archivist package for R\n##\n#' @title Search for an Artifact in the Repository Using Tags\n#'\n#' @description\n#' \\code{searchInRepo} searches for an artifact in the \\link{Repository} using it's \\link{Tags}.\n#' To learn more about artifacts visit \\link[archivist]{archivist-package}.\n#' \n#' \n#' @details\n#' \\code{searchInRepo} searches for an artifact in the Repository using it's \\code{Tag} \n#' (e.g., \\code{name}, \\code{class} or \\code{archiving date}). \\code{Tags} are used in a \\code{pattern}\n#' parameter. For various artifact classes different \\code{Tags} can be searched for. \n#' See \\link{Tags}. If a \\code{pattern} is a list of length 2 then \\code{md5hashes} of all \n#' artifacts created from date \\code{dateFrom} to date \\code{dateTo} are returned. The date \n#' should be formatted according to the YYYY-MM-DD format, e.g., \\code{\"2014-07-31\"}.\n#' \n#' \\code{Tags}, used in a \\code{pattern} parameter, should be determined according to the \n#' format: \\code{\"TagKey:TagValue\"} - see examples.\n#'   \n#' @return\n#' \\code{searchInRepo} returns character vector of \\code{md5hashes} of artifacts that were searched for.\n#' Those are hashes assigned to artifacts while they were saved in the Repository\n#' by the \\link{saveToRepo} function. If the artifact\n#' is not in the Repository then a logical value \\code{FALSE} is returned.\n#' \n#' @param repoType A character containing a type of the remote repository. Currently it can be 'github' or 'bitbucket'.\n#' \n#' @param pattern If \\code{fixed = TRUE}: a character denoting a \\code{Tag} which is to be searched for in the Repository.\n#' It is also possible to specify \\code{pattern} as a list of \n#' length 2 with \\code{dateFrom} and \\code{dateTo}; see details. If \\code{fixed = FALSE}: a regular expression \n#' specifying the beginning of a \\code{Tag}, which will be used to search for artifacts.\n#' \n#' @param patterns A character vector of \\code{patterns}(see \\code{pattern}) to find artifacts in the Repository.\n#' If \\code{intersect = TRUE} then artifacts that \n#' match all conditions are returned. If \\code{intersect = FALSE} then artifacts that match any condition\n#' are returned.\n#' \n#' @param intersect A logical value. See \\code{patterns} for more details.\n#' \n#' @param repoDir A character denoting an existing directory in which artifacts will be searched for.\n#' If it is set to \\code{NULL} (by default), it will use the \\code{repoDir} specified in \\link{setLocalRepo}.\n#' \n#' @param repo While working with the Remote repository. A character containing a name of the Remote repository on which the Repository is stored.\n#' By default set to \\code{NULL} - see \\code{Note}.\n#' \n#' @param user While working with the Remote repository. A character containing a name of the Remote user on whose account the \\code{repo} is created.\n#' By default set to \\code{NULL} - see \\code{Note}.\n#'\n#' @param branch While working with the Remote repository. A character containing a name of \n#' the Remote Repository's branch on which the Repository is stored. Default \\code{branch} is \\code{master}.\n#' \n#' @param fixed A logical value specifying how \\code{artifacts} should be searched for.\n#' If \\code{fixed = TRUE} (default) then artifacts are searched for by using \\code{pattern = \"Tag\"} argument.\n#' If \\code{fixed = FALSE} then artifacts are searched for by using \\code{pattern = \"regular expression\"} argument.\n#' The latter is wider and more flexible method, e.g.,\n#' using \\code{pattern = \"name\", fixed = FALSE} arguments enables to search for all artifacts in the \\code{Repository}.\n#' \n#' @param subdir While working with the Github repository. A character containing a name of a directory on the Remote repository \n#' on which the Repository is stored. If the Repository is stored in the main folder of the Remote repository, this should be set \n#' to \\code{subdir = \"/\"} as default.\n#' \n#' @param realDBname A logical value. Should not be changed by user. It is a technical parameter.\n#'\n#' @note\n#' If \\code{repo} and \\code{user} are set to \\code{NULL} (as default) in the Remote mode then global parameters\n#' set in \\link{setRemoteRepo} function are used.\n#' \n#' @author\n#' Marcin Kosinski, \\email{m.p.kosinski@@gmail.com}\n#'\n#' @examples\n#' \\dontrun{\n#' # objects preparation\n#' \n#'   showLocalRepo(method = \"md5hashes\", \n#'      repoDir = system.file(\"graphGallery\", package = \"archivist\"))\n#'   showLocalRepo(method = \"tags\", \n#'      repoDir = system.file(\"graphGallery\", package = \"archivist\"))\n#'   \n#'   # Tag search, fixed version\n#'   searchInLocalRepo( \"class:ggplot\", repoDir = exampleRepoDir )\n#'   searchInLocalRepo( \"name:\", repoDir = exampleRepoDir )\n#'   # Tag search, regex version\n#'   searchInLocalRepo( \"class\", repoDir = exampleRepoDir, fixed = FALSE )\n#'   \n#'   # Github version\n#'   # check the state of the Repository\n#'   summaryRemoteRepo( user=\"pbiecek\", repo=\"archivist\" )\n#'   showRemoteRepo( user=\"pbiecek\", repo=\"archivist\" )\n#'   showRemoteRepo( user=\"pbiecek\", repo=\"archivist\", method = \"tags\" )\n#'   # Tag search, fixed version\n#'   searchInRemoteRepo( \"varname:Sepal.Width\", user=\"pbiecek\", repo=\"archivist\" )\n#'   searchInRemoteRepo( \"class:lm\", user=\"pbiecek\", repo=\"archivist\", branch=\"master\" )\n#'   searchInRemoteRepo( \"name:myplot123\", user=\"pbiecek\", repo=\"archivist\" )\n#'   \n#'   # Tag search, regex version\n#'   searchInRemoteRepo( \"class\", user=\"pbiecek\", repo=\"archivist\",  fixed = FALSE )\n#'   searchInRemoteRepo( \"name\", user=\"pbiecek\", repo=\"archivist\", fixed = FALSE )\n#'   \n#'   # also on Github\n#'   \n#'   # Remeber to set dateTo parameter to actual date because sometimes we update datasets.\n#'   searchInRemoteRepo( pattern = list( dateFrom = \"2015-10-01\", dateTo = \"2015-11-30\" ), \n#'                       user=\"pbiecek\", repo=\"archivist\", branch=\"master\" )\n#'   \n#'   \n#'   # many archivist-like Repositories on one Remote repository\n#'   \n#'   searchInRemoteRepo( pattern = \"name\", user=\"MarcinKosinski\", repo=\"Museum\", \n#'   branch=\"master\", subdir=\"ex1\", fixed = FALSE )\n#'\n#'   searchInRemoteRepo( pattern = \"name\", user=\"MarcinKosinski\", repo=\"Museum\", \n#'                    branch=\"master\", subdir=\"ex2\", fixed = FALSE )\n#'  \n#'  # multi versions\n#'  multiSearchInRemoteRepo( patterns=c(\"varname:Sepal.Width\", \"class:lm\", \"name:myplot123\"), \n#'                          user=\"pbiecek\", repo=\"archivist\", intersect = FALSE )\n#'   \n#' }\n#' @family archivist\n#' @rdname searchInRepo\n#' @export\nsearchInLocalRepo <- function( pattern, repoDir = aoptions(\"repoDir\"), fixed = TRUE, realDBname = TRUE ){\n  stopifnot( ( is.character( repoDir ) & length( repoDir ) == 1 ) | is.null( repoDir ) )\n  stopifnot( is.logical( fixed ) )\n  stopifnot( is.character( pattern ) | is.list( pattern ) ) \n  stopifnot( length( pattern ) == 1 | length( pattern ) == 2 )\n  \n  # when infoRepo uses searchLocal, it come with realDBname = FALSE\n  if ( realDBname ){ \n    repoDir <- checkDirectory( repoDir )}  \n  \n  # extracts md5hash\n  if ( fixed ){\n   if ( length( pattern ) == 1 ){\n     md5hashES <- unique( executeSingleQuery( dir = repoDir, realDBname = realDBname,\n                              paste0( \"SELECT DISTINCT artifact FROM tag WHERE tag = \",\n                                      \"'\", pattern, \"'\" ) ) )\n                                  # when infoRepo uses searchLocal, it come with realDBname = FALSE\n   }else{\n     ## length pattern == 2\n     md5hashES <- unique( executeSingleQuery( dir = repoDir, realDBname = realDBname,\n                              paste0( \"SELECT DISTINCT artifact FROM tag WHERE createdDate >\",\n                                      \"'\", as.Date(pattern[[1]])-1, \"'\", \" AND createdDate <\",\n                                      \"'\", as.Date(pattern[[2]])+1, \"'\") ) ) }\n                                  # when infoRepo uses searchLocal, it come with realDBname = FALSE\n  }else{\n    # fixed = FALSE\n    md5hashES <- unique( executeSingleQuery( dir = repoDir, realDBname = realDBname,\n                                             paste0( \"SELECT DISTINCT artifact FROM tag WHERE tag LIKE \",\n                                                     \"'\", pattern, \"%'\" ) ) )\n  }\n  return( as.character( md5hashES[, 1] ) ) \n}\n\n#' @rdname searchInRepo\n#' @export\nsearchInRemoteRepo <- function( pattern, repo = aoptions(\"repo\"), user = aoptions(\"user\"), branch = \"master\", subdir = aoptions(\"subdir\"),\n                                repoType = aoptions(\"repoType\"), fixed = TRUE ){\n  stopifnot( is.character( pattern ) | is.list( pattern ) )\n  stopifnot( length( pattern ) == 1 | length( pattern ) == 2 )\n\n  RemoteRepoCheck( repo, user, branch, subdir, repoType) # implemented in setRepo.R\n  \n  # first download database\n  remoteHook <- getRemoteHook(repo=repo, user=user, branch=branch, subdir=subdir)\n  Temp <- downloadDB( remoteHook )\n  \n  # extracts md5hash\n  if ( fixed ){\n   if ( length( pattern ) == 1 ){\n     md5hashES <- unique( executeSingleQuery( dir = Temp, realDBname = FALSE,\n                              paste0( \"SELECT artifact FROM tag WHERE tag = \",\n                                      \"'\", pattern, \"'\" ) ) )\n   }else{\n     # length pattern == 2\n     md5hashES <- unique( executeSingleQuery( dir = Temp, realDBname = FALSE,\n                              paste0( \"SELECT artifact FROM tag WHERE createdDate >\",\n                                      \"'\", as.Date(pattern[[1]])-1, \"'\", \" AND createdDate <\",\n                                      \"'\", as.Date(pattern[[2]])+1, \"'\") ) ) }\n  }else{\n    # fixed FALSE\n    md5hashES <- unique( executeSingleQuery( dir = Temp, realDBname = FALSE,\n                                             paste0( \"SELECT DISTINCT artifact FROM tag WHERE tag LIKE \",\n                                                     \"'\", pattern, \"%'\" ) ) )\n  }\n  file.remove( Temp )\n  return( as.character( md5hashES[, 1] ) ) \n}\n\n#' @rdname searchInRepo\n#' @export\nmultiSearchInLocalRepo <- function( patterns, repoDir = aoptions(\"repoDir\"), fixed = TRUE, intersect = TRUE, realDBname = TRUE ){\n  stopifnot( is.logical( intersect ) )      \n             \n  md5hs <- lapply(patterns, function(pattern) unique(searchInLocalRepo(pattern, repoDir=repoDir, fixed=fixed, realDBname = realDBname) ))\n  if (intersect) {\n    return(names(which(table(unlist(md5hs)) == length(md5hs))))\n  } \n  # union\n  unique(unlist(md5hs))\n}\n\n#' @rdname searchInRepo\n#' @export\nmultiSearchInRemoteRepo <- function( patterns, repo = aoptions(\"repo\"), user = aoptions(\"user\"), branch = \"master\", subdir = aoptions(\"subdir\"),\n                                     repoType = aoptions(\"repoType\"), \n                                     fixed = TRUE, intersect = TRUE ){\n  stopifnot( is.logical(  intersect ) )\n\n  RemoteRepoCheck( repo, user, branch, subdir, repoType) # implemented in setRepo.R\n  \n  remoteHook <- getRemoteHook(repo=repo, user=user, branch=branch, subdir=subdir)\n  Temp <- downloadDB( remoteHook )\n  on.exit(file.remove( Temp ))\n  m <- multiSearchInLocalRepo( patterns, repoDir = Temp, fixed=fixed,\n                               intersect=intersect, realDBname = FALSE)\n  return( m )\n}\n",
    "created" : 1455227259880.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "996212025",
    "id" : "11594FAF",
    "lastKnownWriteTime" : 1455204238,
    "last_content_update" : 0,
    "path" : "~/test1/archivist/R/searchInRepo.R",
    "project_path" : "R/searchInRepo.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}