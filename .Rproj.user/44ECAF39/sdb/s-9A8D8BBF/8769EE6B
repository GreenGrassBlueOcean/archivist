{
    "collab_server" : "",
    "contents" : "extractData <- function( object, parrentMd5hash, parentDir, isForce, ASCII )\n  UseMethod( \"extractData\" )\n\nextractData.default <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  \n}\n\nextractData.ggplot <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  extractedDF <- object$data\n  # check if that artifact might have been already archived\n  check <- executeSingleQuery( dir = parentDir , realDBname = TRUE,\n                               paste0( \"SELECT * from artifact WHERE md5hash ='\", digest(extractedDF), \"'\") )[,1]\n    if ( length( check ) > 0 & isForce ) {\n    warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n  }\n  # archive data\n  DFname <- digest(extractedDF)\n  md5hashDF <- saveToRepo( extractedDF, archiveData = FALSE, repoDir = parentDir, \n                           artifactName = DFname, archiveTags = FALSE, force = isForce, ascii = ASCII,\n                           archiveSessionInfo = FALSE, silent = TRUE)\n  addTag( tag = paste0(\"relationWith:\", parrentMd5hash), md5hash = md5hashDF, dir = parentDir )\n  return( md5hashDF )\n}\n\nextractData.lm <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  extractedDF <- object$model\n  # check if that artifact might have been already archived\n  check <- executeSingleQuery( dir = parentDir , realDBname = TRUE,\n                               paste0( \"SELECT * from artifact WHERE md5hash ='\", digest(extractedDF), \"'\") )[,1]\n  if ( length( check ) > 0 & isForce ) {\n    warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n  }\n  # archive data\n  DFname <- digest(extractedDF)\n  md5hashDF <- saveToRepo( extractedDF, archiveData = FALSE, repoDir = parentDir,\n                           artifactName = DFname, archiveTags = FALSE, force = isForce, ascii = ASCII,\n                           archiveSessionInfo = FALSE, silent = TRUE)\n  addTag( tag = paste0(\"relationWith:\", parrentMd5hash), md5hash = md5hashDF, dir = parentDir )\n  return( md5hashDF )\n}\n\nextractData.htest <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  if (exists(strsplit(object$data.name, \" and \")[[1]][1], envir = parent.frame(1)) &\n        exists(strsplit(object$data.name, \" and \")[[1]][2], envir = parent.frame(1)) ){\n  extractedDF1 <- get( strsplit(object$data.name, \" and \")[[1]][1], envir = parent.frame(1) )\n  extractedDF2 <- get( strsplit(object$data.name, \" and \")[[1]][2], envir = parent.frame(1) )\n  # check if that artifact might have been already archived\n  check <- executeSingleQuery( dir = parentDir , realDBname = TRUE,\n                               paste0( \"SELECT * from artifact WHERE md5hash ='\", digest(list( extractedDF1, extractedDF2 )), \"'\") )[,1]\n  if ( length( check ) > 0 & isForce ) {\n    warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n  }\n  # archive data\n  DFname <- digest(list( extractedDF1, extractedDF2 ))\n  md5hashDF <- saveToRepo( list( extractedDF1, extractedDF2 ), \n                           archiveData = FALSE, repoDir = parentDir,\n                           artifactName = DFname, archiveTags = FALSE,\n                           force = isForce, ascii = ASCII,\n                           archiveSessionInfo = FALSE, silent = TRUE)\n  addTag( tag = paste0(\"relationWith:\", parrentMd5hash), md5hash = md5hashDF, dir = parentDir )\n  return( md5hashDF )\n  }else{\n    warning(paste0(\"Could not find data \", strsplit(object$data.name, \" and \")[[1]][1],\n            \" or \", strsplit(object$data.name, \" and \")[[1]][2], \n            \". Dataset was not archived.\"))\n  }\n}\n\nextractData.lda <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  if (exists(as.character( ( object$call ) )[3], envir = parent.frame(1) )){\n    extractedDF <-  get( as.character( ( object$call ) )[3], envir = parent.frame(1) )\n    # check if that artifact might have been already archived\n    check <- executeSingleQuery( dir = parentDir , realDBname = TRUE,\n                                 paste0( \"SELECT * from artifact WHERE md5hash ='\", digest(extractedDF), \"'\") )[,1]\n    if ( length( check ) > 0 & isForce ) {\n      warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n    }\n    # archive data\n    DFname <- digest(extractedDF)\n    md5hashDF <- saveToRepo( extractedDF, archiveData = FALSE, repoDir = parentDir,\n                             artifactName = DFname, archiveTags = FALSE, force = isForce,\n                             ascii = ASCII, archiveSessionInfo = FALSE, silent = TRUE)\n    addTag( tag = paste0(\"relationWith:\", parrentMd5hash), md5hash = md5hashDF, dir = parentDir )\n    return( md5hashDF )\n  }else{\n    warning(paste0(\"Could not find data \", as.character( ( object$call ) )[3], \n                   \". Dataset was not archived.\")) \n  }\n}\n\nextractData.trellis <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  if (exists(as.character( ( object$call ) )[3], envir = parent.frame(1) )){\n  extractedDF <- get( as.character( object$call )[3], envir = parent.frame(1) )\n  # check if that artifact might have been already archived\n  check <- executeSingleQuery( dir = parentDir , realDBname = TRUE,\n                               paste0( \"SELECT * from artifact WHERE md5hash ='\", digest(extractedDF), \"'\") )[,1]\n  if ( length( check ) > 0 & isForce ) {\n    warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n  }\n  # archive data\n  DFname <- digest(extractedDF)\n  md5hashDF <- saveToRepo( extractedDF, archiveData = FALSE, repoDir = parentDir,\n                           artifactName = DFname, archiveTags = FALSE, force = isForce,\n                           ascii = ASCII, archiveSessionInfo = FALSE, silent = TRUE)\n  addTag( tag = paste0(\"relationWith:\", parrentMd5hash), md5hash = md5hashDF, dir = parentDir )\n  return( md5hashDF )\n  }else{\n    warning(paste0(\"Could not find data \", as.character( ( object$call ) )[3], \n    \". Dataset was not archived.\"))\n  }\n}\n\nextractData.twins <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  # agnes / diana / mona inherits after twins\n  extractedDF <- object$data\n  # check if that artifact might have been already archived\n  check <- executeSingleQuery( dir = parentDir , realDBname = TRUE,\n                               paste0( \"SELECT * from artifact WHERE md5hash ='\", digest(extractedDF), \"'\") )[,1]\n  if ( length( check ) > 0 & isForce ) {\n    warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n  }\n  # archive data\n  DFname <- digest(extractedDF)\n  md5hashDF <- saveToRepo( extractedDF, archiveData = FALSE, repoDir = parentDir,\n                           artifactName = DFname, archiveTags = FALSE, force = isForce, ascii = ASCII,\n                           archiveSessionInfo = FALSE, silent = TRUE)\n  addTag( tag = paste0(\"relationWith:\", parrentMd5hash), md5hash = md5hashDF, dir = parentDir )\n  return( md5hashDF )\n}\n\nextractData.partition <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  # pam / clara / fanny inherits after partition\n  extractedDF <- object$data\n  # check if that artifact might have been already archived\n  check <- executeSingleQuery( dir = parentDir , realDBname = TRUE,\n                               paste0( \"SELECT * from artifact WHERE md5hash ='\", digest(extractedDF), \"'\") )[,1]\n  if ( length( check ) > 0 & isForce ) {\n    warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n  }\n  # archive data\n  DFname <- digest(extractedDF)\n  md5hashDF <- saveToRepo( extractedDF, archiveData = FALSE, repoDir = parentDir,\n                           artifactName = DFname, archiveTags = FALSE, force = isForce, ascii = ASCII,\n                           archiveSessionInfo = FALSE, silent = TRUE)\n  addTag( tag = paste0(\"relationWith:\", parrentMd5hash), md5hash = md5hashDF, dir = parentDir )\n  return( md5hashDF )\n}\n\nextractData.qda <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  if (exists(as.character( ( object$call ) )[2], envir = parent.frame(1) )){\n  extractedDF <-  get( as.character( ( object$call ) )[2], envir = parent.frame(1) )\n  # check if that artifact might have been already archived\n  check <- executeSingleQuery( dir = parentDir , realDBname = TRUE,\n                               paste0( \"SELECT * from artifact WHERE md5hash ='\", digest(extractedDF), \"'\") )[,1]\n  if ( length( check ) > 0 & isForce ) {\n    warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n  }\n  # archive data\n  DFname <- digest(extractedDF)\n  md5hashDF <- saveToRepo( extractedDF, archiveData = FALSE, repoDir = parentDir,\n                           artifactName = DFname, archiveTags = FALSE, force = isForce, ascii = ASCII,\n                           archiveSessionInfo = FALSE, silent = TRUE)\n  addTag( tag = paste0(\"relationWith:\", parrentMd5hash), md5hash = md5hashDF, dir = parentDir )\n  return( md5hashDF )\n  }else{\n    warning(paste0(\"Could not find data \", as.character( ( object$call ) )[2], \n                   \". Dataset was not archived.\"))  \n  }\n}\n\n\nextractData.glmnet <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  # elmet / lognet / multnet /foshnet /coxnet /mrelnet \n                   # inherits after glmnet\n  if (exists(as.character( ( object$call ) )[3], envir = parent.frame(1) ) & \n        exists(as.character( ( object$call ) )[2], envir = parent.frame(1) )){\n  extractedDF1 <- get( as.character( object$call )[2], envir = parent.frame(1) )\n  extractedDF2 <- get( as.character( object$call )[3], envir = parent.frame(1) )\n  # check if that artifact might have been already archived\n  check <- executeSingleQuery( dir = parentDir , realDBname = TRUE,\n                               paste0( \"SELECT * from artifact WHERE md5hash ='\", digest(c( extractedDF1, extractedDF1 )), \"'\") )[,1]\n  if ( length( check ) > 0 & isForce ) {\n    warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n  }\n  # archive data\n  DFname <- digest(c( extractedDF1, extractedDF1 ))\n  md5hashDF <- saveToRepo( c( extractedDF1, extractedDF1 ), archiveData = FALSE, \n                           repoDir = parentDir, artifactName = DFname,\n                           archiveTags = FALSE, \n                           force = isForce, ascii = ASCII, archiveSessionInfo = FALSE, silent = TRUE )\n  addTag( tag = paste0(\"relationWith:\", parrentMd5hash), md5hash = md5hashDF, dir = parentDir )\n  return( md5hashDF )\n  }else{\n    warning(paste0(\"Could not find data \", as.character( ( object$call ) )[3], \n                   \" or \", as.character( ( object$call ) )[2], \n                   \". Dataset was not archived.\")) \n  }\n}\n\nextractData.survfit <- function( object, parrentMd5hash, parentDir, isForce, ASCII ){\n  if (exists(as.character( ( object$call ) )[3], envir = parent.frame(1) )){\n  extractedDF <-  get( as.character( object$call )[3], envir = parent.frame(1) )\n  # check if that artifact might have been already archived\n  check <- executeSingleQuery( dir = parentDir , realDBname = TRUE,\n                               paste0( \"SELECT * from artifact WHERE md5hash ='\", digest(extractedDF), \"'\") )[,1]\n  if ( length( check ) > 0 & isForce ) {\n    warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n  }\n  # archive data\n  DFname <- digest(extractedDF)\n  md5hashDF <- saveToRepo( extractedDF, archiveData = FALSE, repoDir = parentDir, \n                           artifactName = DFname, archiveTags = FALSE, force = isForce, ascii = ASCII,\n                           archiveSessionInfo = FALSE, silent = TRUE)\n  addTag( tag = paste0(\"relationWith:\", parrentMd5hash), md5hash = md5hashDF, dir = parentDir )\n  return( md5hashDF )\n  }else{\n    warning(paste0(\"Could not find data \", as.character( ( object$call ) )[3], \n                   \". Dataset was not archived.\"))  \n  }\n}\n\n\n",
    "created" : 1455204887066.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "627122827",
    "id" : "8769EE6B",
    "lastKnownWriteTime" : 1455222391,
    "last_content_update" : 0,
    "path" : "~/test1/archivist/R/extractData.R",
    "project_path" : "R/extractData.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}