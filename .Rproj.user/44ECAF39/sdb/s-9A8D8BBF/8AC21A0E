{
    "collab_server" : "",
    "contents" : "##    archivist package for R\n##\n#' @title Save an Artifact into a Repository\n#'\n#' @description\n#' \\code{saveToLocalRepo} function saves desired artifacts to the local \\link{Repository} in a given directory.\n#' To learn more about artifacts visit \\link[archivist]{archivist-package}.\n#'\n#' @details\n#' \\code{saveToLocalRepo} function saves desired artifacts to the local Repository in a given directory.\n#' Artifacts are saved in the local Repository, which is a SQLite database named \\code{backpack}.\n#' After every \\code{saveToLocalRepo} call the database is refreshed, so the artifact is available\n#' immediately in the database for other collaborators.\n#' Each artifact is archived in a \\code{md5hash.rda} file. This file will be saved in a folder\n#' (under \\code{repoDir} directory) named \\code{gallery}. For each artifact, \\code{md5hash} is a\n#' unique string of length 32 that is produced by\n#' \\link[digest]{digest} function, which uses a cryptographical MD5 hash algorithm.\n#'\n#' By default, a miniature of an artifact and (if possible) a data set needed to compute this artifact are extracted.\n#' They are also going to be saved in a file named by their \\code{md5hash} in the \\code{gallery} folder\n#' that exists in the directory specified in the \\code{repoDir} argument. Moreover, a specific \\code{Tag}-relation\n#' is going to be added to the \\code{backpack} dataset in case there is a need to load\n#' the artifact with it's related data set - see \\link{loadFromLocalRepo} or \\link{loadFromRemoteRepo}. Default settings\n#' may be changed by using the \\code{archiveData}, \\code{archiveTag} or \\code{archiveMiniature} arguments with the\n#' \\code{FALSE} value.\n#'\n#' \\code{Tags} are artifact's attributes, different for various artifact's classes. For more detailed\n#' information check \\link{Tags}\n#'\n#' Archived artifact can be searched in the \\code{backpack} dataset by using the\n#' \\link{searchInLocalRepo} or \\link{searchInRemoteRepo} functions. Artifacts can be searched by their \\link{Tags},\n#' \\code{names}, \\code{classes} or \\code{archiving date}.\n#'\n#' \\code{firstRows} parameter.\n#'\n#' If the artifact is of class \\code{data.frame} or user set \\code{archiveData = TRUE} for artifact that stores data within it,\n#'  it is possible to specify\n#' how many rows of that data (or that \\code{data.frame}) should be archived in a \\code{miniature}.\n#'  This can be done by adding the argument \\code{firstRows} with the\n#' n corresponding to the number of rows (as in \\link{head}).\n#' Note that, the data can be extracted only from the artifacts that are supported by\n#' the \\pkg{archivist} package; see \\link{Tags}.\n#'\n#' Graphical parameters.\n#'\n#' If the artifact is of class \\code{lattice} or \\code{ggplot}, and\n#' \\code{archiveMiniature = TRUE}, then it is\n#' possible to set the miniature's \\code{width} and \\code{height} parameters. By default they are set to\n#' \\code{width = 800}, \\code{height = 600}.\n#'\n#' Supported artifact's classes are listed here \\link{Tags}.\n#'\n#' @return\n#' As a result of calling this function a character string is returned, which determines\n#' the \\code{md5hash} of the artifact. If\n#' \\code{archiveData} is \\code{TRUE}, the result will also\n#' have an attribute, named \\code{data}, which determines \\code{md5hash} of the data needed\n#' to compute the artifact.\n#'\n#' @seealso\n#'  For more detailed information check the \\pkg{archivist} package\n#' \\href{http://pbiecek.github.io/archivist/}{Use Cases}.\n#' The list of supported artifacts and their tags is available on \\code{wiki} on \\pkg{archivist}\n#' \\href{https://github.com/pbiecek/archivist/wiki/archivist-package---Tags}{Github Repository}.\n#'\n#'\n#' @note\n#' In the following way one can specify his own \\code{Tags} for artifacts by setting artifact's attribute\n#' before call of the \\code{saveToLocalRepo} function:\n#' \\code{attr(x, \"tags\" ) = c( \"name1\", \"name2\" )}, where \\code{x} is an artifact\n#' and \\code{name1, name2} are \\code{Tags} specified by a user.\n#' It can be also done in a new, simpler way by using \\code{userTags} parameter like this:\n#'  \\itemize{\n#'    \\item \\code{saveToLocalRepo(model, repoDir, userTags = c(\"my_model\", \"do not delete\"))}.\n#'  }\n#'  \n#' Specifing additional \\code{Tags} by attributes can be beneficial when one uses \\link{addHooksToPrint}.\n#'  \n#'\n#' Important: if one wants to archive data from artifacts which is one of:\n#' \\code{survfit, glmnet, qda, lda, trellis, htest} class, and this dataset is transformed within\n#' the artifact's formula then \\code{saveToLocalRepo} will not archive this dataset. \\code{saveToLocalRepo}\n#' only archives datasets that already exist in any of R environments.\n#'\n#' Example: The data set will not be archived here.\n#' \\itemize{\n#'    \\item \\code{z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train[,-8])}\n#'    \\item \\code{saveToLocalRepo( z, repoDir )}\n#' }\n#' Example: The data set will be archived here.\n#' \\itemize{\n#'    \\item \\code{train2 <- train[,-8]}\n#'    \\item \\code{z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train2)}\n#'    \\item \\code{saveToLocalRepo( z, repoDir )}\n#' }\n#'\n#' @param artifact An arbitrary R artifact to be saved. For supported artifacts see details.\n#'\n#' @param ... Graphical parameters denoting width and height of a miniature. See details.\n#' Further arguments passed to \\link{head}. See Details section about \\code{firtsRows} parameter\n#'\n#' @param archiveData A logical value denoting whether to archive the data from the \\code{artifact}.\n#'\n#' @param archiveSessionInfo A logical value denoting whether to archive the session info that describes the context in this given artifact was created.\n#'\n#' @param archiveTags A logical value denoting whether to archive Tags from the \\code{artifact}.\n#'\n#' @param archiveMiniature A logical value denoting whether to archive a miniature of the \\code{artifact}.\n#'\n#' @param userTags A character vector with Tags. These Tags will be added to the repository along with the artifact.\n#'\n#' @param repoDir A character denoting an existing directory in which an artifact will be saved.\n#' If it is set to \\code{NULL} (by default), it will use the \\code{repoDir} specified in \\link{setLocalRepo}.\n#'\n#' @param force A logical value denoting whether to archive \\code{artifact} if it was already archived in\n#' a Repository.\n#'\n#' @param value A logical value. Should the result be (default \\code{value = FALSE}) the \\code{md5hash}\n#' of a stored artifact or should the result be an input artifact (\\code{value = TRUE}), so that valueing code\n#' can be used. See examples.\n#'\n#' @param silent If TRUE produces no warnings.\n#'\n#' @param ascii A logical value. An \\code{ascii} argument is passed to \\link{save} function.\n#'\n#' @param artifactName The name of the artifact with which it should be archived.\n#'\n#'\n#' @author\n#' Marcin Kosinski , \\email{m.p.kosinski@@gmail.com}\n#'\n#' @examples\n#' exampleRepoDir <- tempfile()\n#' createLocalRepo(repoDir = exampleRepoDir)\n#' data(swiss)\n#' saveToLocalRepo(swiss, repoDir=exampleRepoDir, archiveSessionInfo = TRUE)\n#' showLocalRepo(method = \"md5hashes\", repoDir = exampleRepoDir)\n#' showLocalRepo(method = \"tags\", repoDir = exampleRepoDir)\n#' \n#' loadFromLocalRepo(md5hash = '600bda83cb840947976bd1ce3a11879d',\n#'   repoDir = system.file(\"graphGallery\", package = \"archivist\"), value = TRUE) -> pl\n#' \n#' saveToLocalRepo(pl, repoDir=exampleRepoDir,\n#'              userTags = c(\"do not delete\", \"my favourite graph\"))\n#' aoptions('repoDir', system.file(\"graphGallery\", package = \"archivist\"))\n#' showLocalRepo(method = \"tags\")\n#' data(iris)\n#' asave(iris, silent = FALSE) # iris was used in pl\n#' aoptions('repoDir', NULL, unset = TRUE)\n#' deleteLocalRepo(exampleRepoDir, TRUE)\n#' rm(exampleRepoDir)\n#'\n#' @family archivist\n#' @rdname saveToRepo\n#' @export\nsaveToLocalRepo <- function( artifact, repoDir = NULL, archiveData = TRUE,\n                        archiveTags = TRUE,\n                        archiveMiniature = TRUE, \n                        archiveSessionInfo = TRUE, \n                        force = TRUE, \n                        value = FALSE, ... , userTags = c(),\n                        silent=aoptions(\"silent\"), ascii = FALSE,\n                        artifactName = deparse(substitute(artifact))) {\n  stopifnot(is.logical(c(archiveData, archiveTags, archiveMiniature, force,  value, silent, ascii, archiveSessionInfo)))\n  stopifnot((is.character(repoDir) & length(repoDir) == 1 ) | is.null(repoDir))\n  stopifnot(is.character(artifactName))\n  stopifnot(length(archiveData) == 1, length(archiveTags) == 1, length(archiveMiniature) == 1,\n            length(archiveSessionInfo) == 1, length(force) == 1, \n            length(value) == 1, length(ascii) == 1, length(artifactName) == 1)\n\n\n  md5hash <- digest( artifact )\n\n  repoDir <- checkDirectory( repoDir )\n\n  # check if that artifact might have been already archived\n  check <- executeSingleQuery( dir = repoDir , realDBname = TRUE,\n                    paste0( \"SELECT * from artifact WHERE md5hash ='\", md5hash, \"'\") )[,1]\n\n  if ( length( check ) > 0 & !force ){\n    stop( paste0(\"Artifact \",md5hash,\" was already archived. If you want to archive it again, use force = TRUE. \\n\"))\n  }\n  if ( length( check ) > 0 & force & !silent){\n#    if ( rememberName ){\n      warning( paste0(\"Artifact \",md5hash,\" was already archived. Another archivisation executed with success.\"))\n    } #else{\n#       warning( \"This artifact's data was already archived. Another archivisation executed with success.\")\n#     }\n#   }\n\n  # save artifact to .rd file\n#   if ( rememberName & !(artifactName %in% ls(envir = parent.frame(1)))) {\n#     warning( paste0(\"Object with the name \", artifactName, \", not found. Saving without name.\"))\n#     rememberName = FALSE\n#   }\n  #if ( rememberName ){\n    assign(x = artifactName, value = artifact)\n    save( file = file.path(repoDir,\"gallery\", paste0(md5hash, \".rda\")), ascii = ascii, list = artifactName)\n    addTag(\"format:rda\", md5hash, dir=repoDir)\n  #}else{\n#    assign( value = artifact, x = md5hash, envir = .GlobalEnv )\n#    save( file = paste0(repoDir, \"gallery/\", md5hash, \".rda\"),  ascii=TRUE, list = md5hash, envir = .GlobalEnv  )\n#     assign( value = artifact, x = md5hash, envir = .ArchivistEnv )\n#     save( file = file.path(repoDir, \"gallery\", paste0(md5hash, \".rda\")),  ascii=ascii, list = md5hash, envir = .ArchivistEnv  )\n#     addTag(\"format:rda\", md5hash, dir=repoDir)\n# \n#     rm(list = md5hash, envir = .ArchivistEnv)\n#   }\n\n  # add entry to database\n#    if ( rememberName ){\n     addArtifact( md5hash, name = artifactName, dir = repoDir )\n#    }else{\n#      addArtifact( md5hash, name = md5hash , dir = repoDir)\n#    # rm( list = md5hash, envir = .ArchivistEnv )\n#    }\n\n  # whether to add Tags\n  if ( archiveTags ) {\n    extractedTags <- extractTags( artifact, objectNameX = artifactName )\n    # remove name from Tags\n#     if (!rememberName) {\n#       extractedTags <- extractedTags[!grepl(extractedTags, pattern=\"^name:\")]\n#     }\n    derivedTags <- attr( artifact, \"tags\" )\n    sapply( c( extractedTags, userTags, derivedTags), addTag, md5hash = md5hash, dir = repoDir )\n    # attr( artifact, \"tags\" ) are Tags specified by a user\n  }\n\n  # whether to archive session_info\n  if ( archiveSessionInfo ){\n    if (!requireNamespace(\"devtools\", quietly = TRUE)) {\n      stop(\"devtools package required for archiveSessionInfo parameter\")\n    }\n    si <- devtools::session_info()\n    md5hashDF <- saveToLocalRepo( si, archiveData = FALSE, repoDir = repoDir, \n                             artifactName = digest(si), archiveTags = FALSE, force=TRUE, \n                             archiveSessionInfo = FALSE)\n    addTag( tag = paste0(\"session_info:\", md5hashDF), md5hash = md5hash, dir = repoDir )\n  }\n  # whether to archive data\n  # if valueing code is used, the \"data\" attr is not needed\n  if ( archiveData & !value ){\n    attr( md5hash, \"data\" )  <-  extractData( artifact, parrentMd5hash = md5hash, \n                                              parentDir = repoDir, isForce = force, ASCII = ascii )\n  }\n  if ( archiveData & value ){\n    extractData( artifact, parrentMd5hash = md5hash,\n                 parentDir = repoDir, isForce = force, ASCII = ascii )\n  }\n\n  # whether to archive miniature\n  if ( archiveMiniature )\n    extractMiniature( artifact, md5hash, parentDir = repoDir ,... )\n  # whether to return md5hash or an artifact if valueing code is used\n  if ( !value ){\n    return( md5hash )\n  }else{\n    return( artifact )\n  }\n}\n\n#'\n#' @rdname saveToRepo\n#' @export\nsaveToRepo <- saveToLocalRepo\n  \n#'\n#' @rdname saveToRepo\n#' @export\nasave <- saveToLocalRepo\n",
    "created" : 1455204266434.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1771917072",
    "id" : "8AC21A0E",
    "lastKnownWriteTime" : 1455206928,
    "last_content_update" : 0,
    "path" : "~/test1/archivist/R/saveToRepo.R",
    "project_path" : "R/saveToRepo.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}