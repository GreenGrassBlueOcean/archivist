{
    "collab_server" : "",
    "contents" : "##    archivist package for R\n##\n#' @title Read Artifacts Given as a List of Tags\n#'\n#' @description\n#' \\code{asearch} searches for artifacts that contain all specified \\link{Tags}\n#' and reads all of them from a default or Github \\link{Repository}. It's a wrapper around \n#' \\link{multiSearchInLocalRepo} and \\link{loadFromLocalRepo}.\n#' \n#' @details\n#' Function \\code{asearch} reads all artifacts that contain given list of \\code{Tags}\n#' from default or GitHub Repository.\n#' It uses both \\link{loadFromLocalRepo} and \\link{multiSearchInLocalRepo} functions \n#' but has shorter name and different parameter's specification.\n#' \n#' @note\n#' Remember that if you want to use local repository you should set it to default.\n#' \n#' @param repo One of following:\n#' \n#' A character with GitHub user name and GitHub repository name separated by `/`.\n#' \n#' NULL in this case search will be performed in the default repo, either local or GitHub.\n#' \n#' @param patterns  A character vector of \\code{Tags}. Only artifacts that \n#' contain all Tags are returned.  \n#' \n#' @return This function returns a list of artifacts (by their values).\n#' \n#' @author \n#' Przemyslaw Biecek, \\email{przemyslaw.biecek@@gmail.com}\n#' \n#' @examples\n#' \\dontrun{\n#' ### default LOCAL version\n#' ## objects preparation\n#' \n#' # data.frame object\n#' data(iris)\n#' \n#' # ggplot/gg object\n#' library(ggplot2)\n#' df <- data.frame(gp = factor(rep(letters[1:3], each = 10)),y = rnorm(30))\n#' library(plyr)\n#' ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))\n#' myplot123 <- ggplot(df, aes(x = gp, y = y)) +\n#'   geom_point() +  geom_point(data = ds, aes(y = mean),\n#'                              colour = 'red', size = 3)\n#' \n#' # lm object\n#' model <- lm(Sepal.Length~ Sepal.Width + Petal.Length + Petal.Width, data= iris)\n#' model2 <- lm(Sepal.Length~ Sepal.Width + Petal.Width, data= iris)\n#' model3 <- lm(Sepal.Length~ Sepal.Width, data= iris)\n#' \n#' ## creating example default local repository\n#' exampleRepoDir <- tempfile()\n#' createLocalRepo(repoDir = exampleRepoDir)\n#' ## setting default local repository\n#' setLocalRepo( repoDir = exampleRepoDir )\n#' \n#' saveToRepo(myplot123)\n#' saveToRepo(iris)\n#' saveToRepo(model)\n#' saveToRepo(model2)\n#' saveToRepo(model3)\n#' \n#' ## Searching for objects of class:lm\n#' lm <- asearch(patterns = \"class:lm\")\n#' \n#' ## Searching for objects of class:lm with coefname:Petal.Width\n#' lm_c_PW <- asearch(patterns = c(\"class:lm\",\"coefname:Petal.Width\"))\n#' \n#' # Note that we searched for objects. Then loaded them from repository by their value.\n#' \n#' \n#' ## deleting example repository\n#' deleteLocalRepo(repoDir = exampleRepoDir, deleteRoot = TRUE)\n#' rm(exampleRepoDir)\n#' \n#' ### default GitHub version\n#' ## Setting default github repository\n#' setRemoteRepo( user = \"pbiecek\", repo = \"archivist\")\n#' \n#' showRemoteRepo(method = \"tags\")$tag\n#' searchInRemoteRepo(pattern = \"class:lm\")\n#' searchInRemoteRepo(pattern = \"class:gg\")\n#' getTagsRemote(md5hash = \"cd6557c6163a6f9800f308f343e75e72\", tag = \"\")\n#' \n#' ## Searching for objects of class:lm\n#' asearch(patterns = c(\"class:lm\"))\n#' ## Searching for objects of class:gg\n#' asearch(patterns = c(\"class:gg\"))\n#' \n#' ### Github version \n#' ## Note that repo argument is passed in the following way to asearch:\n#' ## repo = \"GitHub user name/GitHub repository name\"\n#' \n#' ## Searching for objects of class:gg\n#' asearch(\"pbiecek/graphGallery\", \n#'         patterns = c(\"class:gg\",\n#'                      \"labelx:Sepal.Length\"))\n#' }\n#' @family archivist\n#' @rdname asearch\n#' @export\nasearch <- function( patterns, repo = NULL){\n  stopifnot( (is.character( repo ) & length( repo ) == 1) | is.null( repo ) )\n  stopifnot( is.character( patterns ) )\n\n  res <- list()\n  \n  if (is.null(repo)) {\n    # use default repo\n     oblist <- multiSearchInLocalRepo(patterns = patterns,\n                                      intersect = TRUE)\n    if (length(oblist) > 0) {\n      res <- lapply(oblist, loadFromLocalRepo, value = TRUE)\n      names(res) <- oblist\n    }\n  } else {\n    # at least 3 elements\n    # it's GitHub Repo\n    elements <- strsplit(repo, \"/\")[[1]]\n    stopifnot( length(elements) >= 2 )\n    \n    oblist <- multiSearchInRemoteRepo(user = elements[1], repo=paste(elements[-1], collapse = \"/\"), \n                                patterns = patterns)\n    if (length(oblist)>0) {\n      res <- lapply(paste0(repo, \"/\", oblist), aread)\n      names(res) <- oblist\n    } \n  } \n  res\n}\n",
    "created" : 1455225841789.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "331254944",
    "id" : "3C5DD68A",
    "lastKnownWriteTime" : 1455204238,
    "last_content_update" : 0,
    "path" : "~/test1/archivist/R/asearch.R",
    "project_path" : "R/asearch.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}