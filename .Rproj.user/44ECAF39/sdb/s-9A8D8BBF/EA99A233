{
    "collab_server" : "",
    "contents" : "##    archivist package for R\n##\n#' @title Create an Empty Repository\n#'\n#' @description\n#' \\code{createLocalRepo} creates an empty \\link{Repository} in the given directory in which archived artifacts will be stored.\n#' \n#' @details\n#' At least one Repository must be initialized before using other functions from the \\pkg{archivist} package. \n#' While working in groups, it is highly recommended to create a Repository on a shared Dropbox/GitHub folder.\n#' \n#' All artifacts which are desired to be archived are going to be saved in the local Repository, which is an SQLite \n#' database stored in a file named \\code{backpack}. \n#' After calling \\code{saveToRepo} function, each artifact will be archived in a \\code{md5hash.rda} file. \n#' This file will be saved in a folder (under \\code{repoDir} directory) named \n#' \\code{gallery}. For every artifact, \\code{md5hash} is a unique string of length 32 that is produced by\n#' \\link[digest]{digest} function, which uses a cryptographical MD5 hash algorithm.\n#' \n#' To learn more about artifacts visit \\link[archivist]{archivist-package}.\n#' \n#' Created \\code{backpack} database is a useful and fundamental tool for remembering artifact's \n#' \\code{name}, \\code{class}, \\code{archiving date} etc. (the so called \\link{Tags})\n#' or for keeping artifact's \\code{md5hash}.\n#' \n#' Besides the \\code{backpack} database, \\code{gallery} folder is created in which all \n#' artifacts will be archived.\n#' \n#' After every \\code{saveToRepo} call the database is refreshed. As a result, the artifact is available \n#' immediately in \\code{backpack.db} database for other collaborators.\n#' \n#' \n#' @param repoDir A character that specifies the directory for the Repository which is to be made. While working with GitHub Repository, this will\n#' be the directory of the synchronized Local Repository, in which the new Local Repository will be created (is \\code{NULL} then is the same as \\code{repo}).\n#' \n#' @param force If \\code{force = TRUE} and \\code{repoDir} parameter specifies the directory that doesn't exist,\n#' then function call will force to create new \\code{repoDir} directory.\n#' Default set to \\code{force = TRUE}.\n#' \n#' @param default If \\code{default = TRUE} then \\code{repoDir} (\\code{repo}) is set as default local repository \n#' (for GitHub version also the \\code{user} is set as default GitHub user).\n#' @param ... All arguments are being passed to \\code{createLocalRepo}.\n#' \n#' @author \n#' Marcin Kosinski, \\email{m.p.kosinski@@gmail.com}\n#'\n#' @examples\n#' \\dontrun{\n#' exampleRepoDir <- tempfile()\n#' createLocalRepo( repoDir = exampleRepoDir, default =  TRUE )\n#' data(iris)\n#' saveToRepo(iris)\n#' showLocalRepo()\n#' showLocalRepo(method = \"tags\")\n#' deleteLocalRepo( repoDir = exampleRepoDir, unset = TRUE, deleteRoot = TRUE)\n#' }\n#' @family archivist\n#' @rdname createEmptyRepo\n#' @export\ncreateLocalRepo <- function( repoDir, force = TRUE, default = FALSE ){\n  stopifnot( is.character( repoDir ), length( repoDir ) == 1 )\n  stopifnot( is.logical( default ), length( default ) == 1 )\n  \n  if ( !file.exists( repoDir ) & !force ) \n    stop( paste0(\"Directory \", repoDir, \" does not exist. Try with force=TRUE.\") )\n  if ( !file.exists( repoDir ) & force ){\n    cat( paste0(\"Directory \", repoDir, \" did not exist. Forced to create a new directory.\") )\n    repoDir <- checkDirectory( repoDir, create = TRUE )\n    dir.create( repoDir )\n  }\n  \n  repoDir <- checkDirectory( repoDir, create = TRUE )\n  \n  # create connection\n  backpack <- getConnectionToDB( repoDir, realDBname = TRUE )\n  \n  # create tables\n  artifact <- data.frame(md5hash = \"\",\n                         name = \"\",\n                         createdDate = as.character( now() ), \n                         stringsAsFactors = FALSE ) \n  \n  tag <- data.frame(artifact = \"\", \n                    tag = \"\", \n                    createdDate = as.character( now() ), \n                    stringsAsFactors = FALSE )\n  \n  # insert tables into database\n  dbWriteTable( backpack, \"artifact\", artifact, overwrite = TRUE, row.names = FALSE )\n  dbWriteTable( backpack, \"tag\", tag, overwrite = TRUE, row.names = FALSE )\n  \n  \n  dbGetQuery(backpack, \"delete from artifact\")\n  dbGetQuery(backpack, \"delete from tag\")\n  \n  dbDisconnect( backpack )\n  \n  # if gallery folder does not exist - make it\n  if ( !file.exists( file.path( repoDir, \"gallery\" ) ) ){\n    dir.create( file.path( repoDir, \"gallery\" ), showWarnings = FALSE)\n  }\n  \n  if (default) {\n    setLocalRepo(repoDir)\n  }\n   \n}\n\n#' @family archivist\n#' @rdname createEmptyRepo\n#' @export\ncreateEmptyRepo <- function(...) {\n  .Deprecated(\"createEmptyRepo is deprecated. Use createLocalRepo() instead.\")\n  createLocalRepo(...)\n}\n\naddArtifact <- function( md5hash, name, dir ){\n  # creates connection and driver\n  # send insert\n  executeSingleQuery( dir,\n              paste0( \"insert into artifact (md5hash, name, createdDate) values\",\n                      \"('\", md5hash, \"', '\", name, \"', '\", as.character( now() ), \"')\" ) )\n}\n\naddTag <- function( tag, md5hash, createdDate = now(), dir ){\n executeSingleQuery( dir,\n              paste0(\"insert into tag (artifact, tag, createdDate) values \",\n                     \"('\", md5hash, \"', '\", gsub(tag, pattern=\"'\", replacement=\"\"), \"', '\", as.character( now() ), \"')\" ) )\n}\n\n# realDBname was needed because Github version function uses temporary file as database\n# and they do not name this file as backpack.db in repoDir directory\ngetConnectionToDB <- function( repoDir, realDBname ){\n    if ( realDBname ){\n      conn <- dbConnect( get( \"sqlite\", envir = .ArchivistEnv ), file.path( repoDir, \"backpack.db\" ) )\n    }else{\n      conn <- dbConnect( get( \"sqlite\", envir = .ArchivistEnv ), repoDir )\n    }\n    return( conn )\n}\n  \nexecuteSingleQuery <- function( dir, query, realDBname = TRUE ) {\n  conn <- getConnectionToDB( dir, realDBname )\n  on.exit( dbDisconnect( conn ) )\n  res <- dbGetQuery( conn, query )\n  return( res )\n}\n\nreadSingleTable <- function( dir, table, realDBname = TRUE ){\n  conn <- getConnectionToDB( dir, realDBname )\n  tabs <- dbReadTable( conn, table )\n  dbDisconnect( conn )\n  return( tabs )\n}\n\n# for Github version function that requires to load database\ndownloadDB <- function( remoteHook ){\n   URLdb <- file.path( remoteHook, \"backpack.db\") \n   if (url.exists(URLdb)){\n     db <- getBinaryURL( URLdb )\n     Temp2 <- tempfile()\n     file.create( Temp2 )\n     writeBin( db, Temp2 )\n     return( Temp2 )\n   } else {\n     stop(paste0(\"Such a repo: \", remoteHook, \" does not exist\",\n                 \" or there is no archivist-like Repository on this repo.\"))\n   }\n     \n}\n\ncheckDirectory <- function( directory, create = FALSE ){\n  # check if global repository was specified by setLocalRepo\n  if ( is.null(directory) ){\n\n    directory <- aoptions(\"repoDir\")\n  }\n  # check whether it is second call of checkDirectory \n  # (e.g CreatEmptyRepo + default = TRUE)\n#   if ( grepl(\"/$\", x = directory , perl=TRUE) ){\n#     directory <- gsub(pattern = \".$\", replacement = \"\",\n#                       x = directory, perl = TRUE)\n#   }\n  # check property of directory\n  if ( !create ){\n    # check whether repository exists\n    if ( !dir.exists( directory ) ){\n      stop( paste0( \"There is no such repository as \", directory ) )\n    }\n    # check if repository is proper (has backpack.db and gallery)\n    if ( !all( c(\"backpack.db\", \"gallery\") %in% list.files(directory) ) ){\n      stop( paste0( directory, \" is not a proper repository. There is neither backpack.db nor gallery.\" ) )\n    }\n  }\n  # check if repoDir has \"/\" at the end and add it if not\n#   if ( !grepl(\"/$\", x = directory , perl=TRUE) ){\n#     directory <- paste0(  directory, \"/\"  )\n#   }\n  return( directory )\n}\n\n# checkDirectory2 <- function( directory ){\n#   check if repoDir has \"/\" at the end and add it if not\n#   if ( !grepl(\"/$\", x = directory , perl=TRUE) ){\n#     directory <- paste0(  directory, \"/\"  )\n#   }\n#   return( directory )\n# }\n",
    "created" : 1455207650455.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3935404213",
    "id" : "EA99A233",
    "lastKnownWriteTime" : 1455204238,
    "last_content_update" : 0,
    "path" : "~/test1/archivist/R/createEmptyRepo.R",
    "project_path" : "R/createEmptyRepo.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}