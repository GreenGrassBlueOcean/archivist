% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/archive.R
\name{archive}
\alias{archive}
\title{Archive Artifact to Local and GitHub Repository}
\usage{
archive(artifact, commitMessage = aoptions("commitMessage"),
  repo = aoptions("repo"), user = aoptions("user"),
  password = aoptions("password"), archiveData = aoptions("archiveData"),
  archiveTags = aoptions("archiveTags"),
  archiveMiniature = aoptions("archiveMiniature"),
  archiveSessionInfo = aoptions("archiveSessionInfo"),
  force = aoptions("force"), rememberName = aoptions("rememberName"), ...,
  userTags = c(), silent = aoptions("silent"), ascii = aoptions("ascii"),
  alink = aoptions("alink"))
}
\arguments{
\item{artifact}{An artifact to be archived on Local and Github \link{Repository}.}

\item{commitMessage}{A character denoting a message added to the commit while archiving \code{artifact} on GitHub Repository.
By default, an artifact's \link{md5hash} is added to the commit message when it is specified to \code{NULL}.}

\item{repo}{A character denoting GitHub repository name and synchronized local existing directory in which an artifact will be saved.}

\item{user}{A character denoting GitHub user name. Can be set globally with \code{aoptions("user", user)}.
See \link{archivist-github-integration}.}

\item{password}{A character denoting GitHub user password. Can be set globally with \code{aoptions("password", password)}.
See \link{archivist-github-integration}.}

\item{archiveData}{A logical value denoting whether to archive the data from the \code{artifact}.}

\item{archiveTags}{A logical value denoting whether to archive Tags from the \code{artifact}.}

\item{archiveMiniature}{A logical value denoting whether to archive a miniature of the \code{artifact}.}

\item{archiveSessionInfo}{A logical value denoting whether to archive the session info that describes the context in this given artifact was created.}

\item{force}{A logical value denoting whether to archive \code{artifact} if it is already archived in
a Repository.}

\item{rememberName}{A logical value. Should not be changed by a user. It is a technical parameter.}

\item{...}{Further arguments passed to \link{alink} function, when \code{alink} set to \code{TRUE} OR 
graphical parameters denoting width and height of a miniature. See details. 
Further arguments passed to \link{head}. See Details section in \link{saveToRepo} about \code{firtsRows} parameter}

\item{userTags}{A character vector with Tags. These Tags will be added to the repository along with the artifact.}

\item{silent}{If TRUE produces no warnings.}

\item{ascii}{A logical value. An \code{ascii} argument is passed to \link{save} function.}

\item{alink}{Logical. Whether the result should be put into \link{alink} function. Pass further arguments with \code{...}
parameter.}
}
\description{
\code{archive} stores artifacts in the local \link{Repository} and automatically pushes archived
artifacts to the Github \code{Repository} with which the local \code{Repository} is synchronized
(via \link{createEmptyGithubRepo} or \link{cloneGithubRepo}). Function stores artifacts on the same
way as \link{saveToRepo} function. More archivist functionalities that integrate archivist and GitHub API
 can be found here \link{archivist-github-integration} (\link{agithub}).
}
\examples{
\dontrun{

# empty Github Repository creation

library(httr)
myapp <- oauth_app("github",
                   key = app_key,
                   secret = app_secret)
github_token <- oauth2.0_token(oauth_endpoints("github"),
                               myapp,
                               scope = "public_repo")
# setting options                              
aoptions("github_token", github_token)
aoptions("user", user)
aoptions("password", user)

createEmptyGithubRepo("archive-test4", default = TRUE)
## artifact's archiving
exampleVec <- 1:100

# archiving
archive(exampleVec) -> md5hash_path

## proof that artifact is really archived
showGithubRepo() # uses options from setGithubRepo
# let's remove exampleVec
rm(exampleVec)
# and load it back from md5hash_path
aread(md5hash_path)


# clone example
unlink("archive-test", recursive = TRUE)
cloneGithubRepo('https://github.com/MarcinKosinski/archive-test')
setGithubRepo(aoptions("user"), "archive-test")
data(iris)
archive(iris)
showGithubRepo()

## alink() option
vectorLong <- 1:100
vectorShort <- 1:20
# archiving
alink(archive(vectorLong))
archive(vectorShort, alink = TRUE)
showGithubRepo()


}
}
\author{
Marcin Kosinski, \email{m.p.kosinski@gmail.com}
}
\seealso{
Other archivist: \code{\link{Repository}},
  \code{\link{Tags}}, \code{\link{\%a\%}},
  \code{\link{addTagsRepo}}, \code{\link{ahistory}},
  \code{\link{alink}}, \code{\link{aoptions}},
  \code{\link{archivist-github-integration}},
  \code{\link{archivist-package}}, \code{\link{aread}},
  \code{\link{asearch}}, \code{\link{cache}},
  \code{\link{cloneGithubRepo}},
  \code{\link{copyLocalRepo}},
  \code{\link{createEmptyRepo}},
  \code{\link{createGithubMDGallery}},
  \code{\link{deleteRepo}}, \code{\link{getTagsLocal}},
  \code{\link{loadFromLocalRepo}}, \code{\link{md5hash}},
  \code{\link{pushRepo}}, \code{\link{rmFromRepo}},
  \code{\link{saveToRepo}},
  \code{\link{searchInLocalRepo}},
  \code{\link{setLocalRepo}},
  \code{\link{shinySearchInLocalRepo}},
  \code{\link{showLocalRepo}},
  \code{\link{splitTagsLocal}},
  \code{\link{summaryLocalRepo}},
  \code{\link{zipLocalRepo}}
}

